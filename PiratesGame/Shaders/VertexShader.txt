#version 330 core

layout(location = 0) in vec3 vertexPositionModelSpace;
layout(location = 1) in vec3 vertexNormalModelSpace;
layout(location = 2) in vec3 vertexTextureModelSpace;
out vec3 n;
out vec3 l;
out vec3 e;
out float distance;

uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;



void main() {

	gl_Position = MVP * vec4(vertexPositionModelSpace, 1);


	vec3 vertexCameraSpace = (V * M * vec4(vertexPositionModelSpace, 1)).xyz;
	vec3 lightWorldSpace = vec3(1, 1, 1);
	vec3 lightCameraSpace = (V * vec4(lightWorldSpace, 1)).xyz;
	vec3 normalCameraSpace = (V * M * vec4(vertexNormalModelSpace, 0)).xyz;

	vec3 lightDirectionCameraSpace = lightCameraSpace - vertexCameraSpace;

	vec3 eyeDirectionCameraSpace = vec3(0, 0, 0) - vertexCameraSpace;

	n = normalize(normalCameraSpace);
	l = lightDirectionCameraSpace;
	e = eyeDirectionCameraSpace;
	float distance = length(lightDirectionCameraSpace);

}